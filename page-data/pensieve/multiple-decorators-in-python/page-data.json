{"componentChunkName":"component---src-templates-post-js","path":"/pensieve/multiple-decorators-in-python","result":{"data":{"markdownRemark":{"html":"<h1>Multiple Decorators in Python</h1>\n<h5>Before going to Multiple Decorators let’s first understand what is Decorators</h5>\n<h2>Decorators in Python</h2>\n<p>Decorators are used to change the functionality of a function without modifying the actual function by taking the function as an argument.</p>\n<h3>code structure for Decorators in python</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Dec_1\ndef A_funk():\n    # functionality\n    return If_Needed_to_return\nA_funk()</code></pre></div>\n<h3>Code explanation :-</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def Add_Style(funk):                  # step 2  funk -> DisplayName\n    def inner():                      # step 4\n        print(\"&lt;-\",end=\"\")            #step 5\n        funk()                        #step 6 call to funk() -> displayName() function\n        print(\"->\",end=\"\")            #step 9\n    return inner                      # step 3 inner function will call\n\n\ndef DisplayName():           # step 7\n    print(\"TutorialsPoint\",end=\"\")   # step 8\n\ngg = Add_Style(DisplayName)    # step 1: Add_Style function will take DisplayName function as an argument\ngg()\n\n# -or-\n# Add_Style(DisplayName)()</code></pre></div>\n<h3>Let’s take an example where we use decorators:</h3>\n<p>The DisplayNamefunction will pass as an argument to the add_Style function and the text changest \"TutorialsPoint\" to \"&#x3C;-TutorialsPoint->\"</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Add_Style</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;-\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner\n\n<span class=\"token decorator annotation punctuation\">@Add_Style</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TutorialsPoint\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\nDisplayName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Output :-</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;-TutorialsPoint-></code></pre></div>\n<h3>Where to use decorators (with an example):</h3>\n<h4>If decorators are not used :-</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk1() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\n    end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The time taken by this function is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end_time <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> Milli Second\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk2() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\n    end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The time taken by this function is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end_time <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> Milli Second\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk3() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\n    end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The time taken by this function is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end_time <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> Milli Second\"</span></span><span class=\"token punctuation\">)</span>\nfunk1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunk2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunk3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Output :-</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;-TutorialsPoint-></code></pre></div>\n<p>In the above code, you can see that we are repeating the code in every function to calculate the time taken by a function.</p>\n<p>To reduce the repetitive task we use Decorators.</p>\n<h3>Now using Decorators in python</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_taken</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"The time taken by this function is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>end_time <span class=\"token operator\">-</span> start_time<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> Milli Second\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner\n\n<span class=\"token decorator annotation punctuation\">@time_taken</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk1() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@time_taken</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk2() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@time_taken</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">funk3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># A big Task which may be any code that takes some time</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"funk3() Task is Done\"</span><span class=\"token punctuation\">)</span>\n\nfunk1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunk2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunk3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, No need to repeat the code in every function to calculate the time taken by a function.</p>\n<h2>Multiple Decorators in Python</h2>\n<p>In simple terms, If a function has multiple decorators we call it as chain of function decorators.<br></p>\n<h4>code structure for Multiple Decorators in python</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Dec_1\n@Dec_2\n@Dec_3\n@Dec_4\n.\n.\n.\n\ndef A_funk():\n    # functionality\n    return If_Needed_to_return\nA_funk()</code></pre></div>\n<h4>Let's understand Chaining of Decorators with an example:</h4>\n<p><strong>With two decorators</strong><br>\n@add<em>Borders<br>\n@add</em>Style<br></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_Borders</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># This function will take add_Style function as an argument</span>\n    <span class=\"token comment\"># add_Style -> funk</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_Style</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># This function will take DisplayName function as an argument</span>\n    <span class=\"token comment\"># DisplayName -> funk</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;-\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner\n<span class=\"token decorator annotation punctuation\">@add_Borders</span>\n<span class=\"token decorator annotation punctuation\">@add_Style</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># function which will display \"TutorialsPoint\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TutorialsPoint\"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># GG = add_Borders(add_Style(DisplayName))</span>\n<span class=\"token comment\"># GG()</span>\n\nDisplayName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Output: -</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">|&lt;-TutorialsPoint->|</code></pre></div>\n<p>We can also use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GG = add_Borders(add_Style(DisplayName))\nGG()</code></pre></div>\n<h4>Another example in which we are returning the strings :</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_Borders</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"|\"</span> <span class=\"token operator\">+</span> funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|\"</span>\n    <span class=\"token keyword\">return</span> inner\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_Style</span><span class=\"token punctuation\">(</span>funk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&lt;-\"</span> <span class=\"token operator\">+</span> funk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span>\n    <span class=\"token keyword\">return</span> inner\n<span class=\"token decorator annotation punctuation\">@add_Borders</span>\n<span class=\"token decorator annotation punctuation\">@add_Style</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"TutorialsPoint\"</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>DisplayName<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Explanation :</strong> <br><br>\nThe Decorator execution order is from bottom to top for example in our case @add<em>Style to @add</em>Borders<br>\nlet's the base function be DisplayName()<br><br>\n<strong>step 1:</strong>\nFirst the base function will pass as an argument to the add<em>Style function and the text changest \"TutorialsPoint\" to \"&#x3C;-TutorialsPoint->\"<br>\n<strong>step 2:</strong>\nThen the add</em>Style function will pass as an argument to add_Borders function and the text changest \"&#x3C;-TutorialsPoint->\" to \"|&#x3C;-TutorialsPoint->|\"<br>\n<strong>step3:</strong>\nit will print \"|&#x3C;-TutorialsPoint->|\"</p>\n<p>In this above code we can understand that how Multiple Decorators are helping to change the functionality of a DisplayName() function twice first it's adding add<em>style \"&#x3C;- plaintext ->\" and then adding add</em>Borders \" | plaintext | \" &#x26; if needed we can add more additional functionality to DisplayName() function.</p>\n<p>There is a builtin standard library called inspect module in Python where we can use getsource() method to display the source code of any python object</p>","frontmatter":{"title":"Multiple Decorators in Python","description":"docker-compose version discrepancies","date":"2019-12-13","slug":"/pensieve/multiple-decorators-in-python","tags":["WordPress","Docker"]}}},"pageContext":{}},"staticQueryHashes":["3115057458"]}